---
category: quality
priority: medium
agents: [security-agent]
description: "Language-specific security assessments"
tags: [language-security, javascript, python, java, go]
last_updated: "2025-09-07"
mcp_dependencies: []
---

# Language-Specific Security Hook
# Defines language-specific security checks and best practices

hook_name: language-security
version: "1.0"
trigger: "on_security_scan"

# CORE LANGUAGE-SPECIFIC SECURITY ACTIONS
actions:
  check_javascript_security:
    description: "Check for common JavaScript security vulnerabilities"
    required: false
    implementation: |
      - Scan for prototype pollution vulnerabilities
      - Check for insecure use of `eval()` and other dynamic code execution functions
      - Look for vulnerabilities in popular Node.js frameworks like Express

  check_python_security:
    description: "Check for common Python security vulnerabilities"
    required: false
    implementation: |
      - Scan for pickle deserialization vulnerabilities
      - Check for command injection in `os.system()` and `subprocess` calls
      - Look for vulnerabilities in popular web frameworks like Django and Flask

  check_go_security:
    description: "Check for common Go security vulnerabilities"
    required: false
    implementation: |
      - Scan for race conditions in concurrent code
      - Check for path traversal vulnerabilities when working with the filesystem
      - Look for vulnerabilities in the use of `unsafe` pointers
      - Ensure proper error handling to avoid panics

  check_csharp_security:
    description: "Check for common C# security vulnerabilities"
    required: false
    implementation: |
      - Scan for insecure deserialization vulnerabilities
      - Check for SQL injection in ADO.NET code
      - Look for vulnerabilities in ASP.NET Core applications

  check_cpp_security:
    description: "Check for common C++ security vulnerabilities"
    required: false
    implementation: |
      - Scan for buffer overflows and other memory safety issues
      - Check for proper use of smart pointers to avoid memory leaks
      - Look for vulnerabilities in the use of C-style casts

  check_rust_security:
    description: "Check for common Rust security vulnerabilities"
    required: false
    implementation: |
      - Use `cargo audit` to check for dependencies with known security vulnerabilities
      - Look for panics in the code that could lead to denial of service
      - Check for unsafe code blocks and ensure that they are properly justified

  check_java_security:
    description: "Check for common Java security vulnerabilities"
    required: false
    implementation: |
      - Scan for XML External Entity (XXE) injection vulnerabilities
      - Check for insecure deserialization of Java objects
      - Look for vulnerabilities in popular web frameworks like Spring and Struts