---
category: mcp-integration
priority: high
agents: [maker-agent, plan-agent, docs-agent]
description: "External documentation queries via Context7"
tags: [context7, mcp, documentation, frameworks, best-practices]
last_updated: "2025-09-07"
mcp_dependencies: [context7]
---

# Context7 Patterns Hook
# External documentation and best practices integration through Context7 MCP

hook_name: context7-patterns
version: "2.0"
trigger: "on_external_library_usage"

# CORE CONTEXT7 ACTIONS
actions:
  query_documentation:
    description: "Retrieve official library/framework documentation"
    required: true
    mcp_server: "context7"
    implementation: |
      - Query specific API documentation
      - Get usage examples and patterns
      - Retrieve version-specific information
      - Obtain configuration guides
      - Access troubleshooting resources
    
  get_best_practices:
    description: "Access established best practices and patterns"
    required: true
    mcp_server: "context7"
    implementation: |
      - Query recommended implementation patterns
      - Get architectural guidance
      - Access performance optimization tips
      - Retrieve security best practices
      - Obtain testing strategies
    
  fetch_migration_guides:
    description: "Get version upgrade and migration information"
    required: false
    mcp_server: "context7"
    implementation: |
      - Access version migration guides
      - Get breaking change information
      - Retrieve upgrade procedures
      - Access compatibility matrices
      - Get deprecation timelines
    
  validate_usage_patterns:
    description: "Verify implementation against official patterns"
    required: false
    mcp_server: "context7"
    implementation: |
      - Compare against official examples
      - Validate configuration patterns
      - Check for deprecated usage
      - Verify security patterns
      - Validate performance patterns

# CONTEXT7 MCP OPERATIONS
operations:
  library_documentation:
    operation: "queryDocumentation"
    parameters:
      - library_name: "Framework or library identifier"
      - version: "Specific version (optional, defaults to latest)"
      - topic: "Specific topic or API endpoint"
      - depth: "Documentation depth (overview, detailed, complete)"
    
    returns:
      - documentation: "Formatted documentation content"
      - examples: "Code examples and usage patterns"
      - references: "Related documentation links"
      - version_info: "Version compatibility information"
    
    use_cases:
      api_reference:
        description: "Get specific API documentation"
        implementation: |
          const apiDocs = await context7.queryDocumentation('react', '18.2.0', {
            topic: 'useEffect',
            depth: 'detailed',
            include_examples: true
          });
          
          return {
            signature: apiDocs.signature,
            description: apiDocs.description,
            parameters: apiDocs.parameters,
            returns: apiDocs.returns,
            examples: apiDocs.examples,
            common_patterns: apiDocs.patterns,
            gotchas: apiDocs.warnings
          };
      
      configuration_guidance:
        description: "Get framework configuration documentation"
        implementation: |
          const configDocs = await context7.queryDocumentation('webpack', 'latest', {
            topic: 'configuration',
            section: 'optimization',
            include_examples: true
          });
          
          return {
            config_options: configDocs.options,
            recommended_settings: configDocs.recommendations,
            examples: configDocs.examples,
            performance_tips: configDocs.optimization,
            common_mistakes: configDocs.pitfalls
          };
      
      integration_patterns:
        description: "Get integration and setup patterns"
        implementation: |
          const integrationDocs = await context7.queryDocumentation('express', 'latest', {
            topic: 'middleware',
            context: 'security',
            depth: 'complete'
          });
          
          return {
            setup_patterns: integrationDocs.setup,
            middleware_chain: integrationDocs.chain,
            security_practices: integrationDocs.security,
            error_handling: integrationDocs.errors,
            testing_approaches: integrationDocs.testing
          };
  
  best_practices:
    operation: "getBestPractices"
    parameters:
      - technology: "Technology or framework name"
      - context: "Specific use case or scenario"
      - domain: "Application domain (web, mobile, api, etc.)"
      - complexity: "Project complexity level"
    
    returns:
      - practices: "List of recommended practices"
      - patterns: "Implementation patterns"
      - anti_patterns: "Things to avoid"
      - rationale: "Explanation of recommendations"
    
    use_cases:
      architecture_guidance:
        description: "Get architectural best practices"
        implementation: |
          const practices = await context7.getBestPractices('microservices', {
            context: 'api_design',
            domain: 'enterprise',
            complexity: 'high'
          });
          
          return {
            service_boundaries: practices.boundaries,
            communication_patterns: practices.communication,
            data_management: practices.data,
            monitoring_strategy: practices.monitoring,
            deployment_practices: practices.deployment,
            anti_patterns: practices.avoid,
            decision_criteria: practices.when_to_use
          };
      
      security_practices:
        description: "Get security best practices"
        implementation: |
          const securityPractices = await context7.getBestPractices('nodejs', {
            context: 'web_security',
            focus: 'authentication'
          });
          
          return {
            authentication_patterns: securityPractices.auth,
            input_validation: securityPractices.validation,
            secure_headers: securityPractices.headers,
            session_management: securityPractices.sessions,
            common_vulnerabilities: securityPractices.vulns,
            mitigation_strategies: securityPractices.mitigations
          };
      
      performance_optimization:
        description: "Get performance best practices"
        implementation: |
          const perfPractices = await context7.getBestPractices('react', {
            context: 'performance',
            scenario: 'large_application'
          });
          
          return {
            rendering_optimization: perfPractices.rendering,
            state_management: perfPractices.state,
            code_splitting: perfPractices.splitting,
            caching_strategies: perfPractices.caching,
            bundle_optimization: perfPractices.bundling,
            measurement_tools: perfPractices.tools
          };
  
  migration_guidance:
    operation: "getMigrationGuide"
    parameters:
      - library_name: "Library being migrated"
      - from_version: "Current version"
      - to_version: "Target version"
      - migration_scope: "Scope of migration (breaking, all, security)"
    
    returns:
      - migration_steps: "Step-by-step migration guide"
      - breaking_changes: "List of breaking changes"
      - compatibility_info: "Version compatibility details"
      - code_transforms: "Required code changes"
      - testing_guidance: "Migration testing approaches"
    
    use_cases:
      major_version_upgrade:
        description: "Handle major version migrations"
        implementation: |
          const migrationGuide = await context7.getMigrationGuide('angular', '14.0.0', '16.0.0', {
            scope: 'breaking',
            include_transforms: true
          });
          
          return {
            preparation_steps: migrationGuide.preparation,
            breaking_changes: migrationGuide.breaking,
            automated_transforms: migrationGuide.transforms,
            manual_changes: migrationGuide.manual,
            testing_strategy: migrationGuide.testing,
            rollback_plan: migrationGuide.rollback,
            timeline_estimate: migrationGuide.timeline
          };
      
      dependency_updates:
        description: "Handle dependency upgrade chains"
        implementation: |
          const depMigration = await context7.getMigrationGuide('webpack', '4.46.0', '5.88.0', {
            include_dependencies: true,
            check_compatibility: true
          });
          
          return {
            dependency_chain: depMigration.deps,
            config_changes: depMigration.config,
            plugin_updates: depMigration.plugins,
            breaking_changes: depMigration.breaking,
            compatibility_issues: depMigration.compatibility,
            migration_order: depMigration.order
          };
      
      security_updates:
        description: "Handle security-focused migrations"
        implementation: |
          const secMigration = await context7.getMigrationGuide('express', '4.17.1', '4.18.2', {
            scope: 'security',
            vulnerability_focus: true
          });
          
          return {
            security_fixes: secMigration.security,
            vulnerability_patches: secMigration.vulns,
            config_hardening: secMigration.hardening,
            testing_security: secMigration.testing,
            monitoring_updates: secMigration.monitoring
          };

# FRAMEWORK-SPECIFIC PATTERNS
framework_patterns:
  react:
    common_queries:
      - hooks_patterns: "useEffect, useState, useCallback best practices"
      - component_design: "Component composition and prop patterns"
      - state_management: "Redux, Context, Zustand integration"
      - performance: "React.memo, useMemo, lazy loading"
      - testing: "React Testing Library patterns"
    
    version_specific:
      "18.x":
        - concurrent_features: "Suspense, startTransition, useDeferredValue"
        - strict_mode: "StrictMode changes and implications"
        - server_components: "RSC patterns and limitations"
      
      "17.x":
        - jsx_transform: "New JSX transform patterns"
        - event_delegation: "Event system changes"
    
    query_patterns: |
      // Get React hook best practices
      const hookPatterns = await context7.queryDocumentation('react', '18.2.0', {
        topic: 'hooks',
        subtopic: 'best_practices',
        include_examples: true
      });
      
      // Get performance optimization patterns
      const perfPatterns = await context7.getBestPractices('react', {
        context: 'performance',
        app_size: 'large'
      });
  
  nodejs:
    common_queries:
      - express_patterns: "Middleware, routing, error handling"
      - async_patterns: "Promises, async/await, streams"
      - security_hardening: "Helmet, CORS, authentication"
      - performance_optimization: "Clustering, caching, profiling"
      - testing_strategies: "Jest, supertest, mocking"
    
    ecosystem_integration:
      database:
        - mongoose_patterns: "Schema design, validation, middleware"
        - prisma_patterns: "Schema, migrations, type safety"
        - typeorm_patterns: "Entities, repositories, relations"
      
      authentication:
        - passport_patterns: "Strategy configuration, session management"
        - jwt_patterns: "Token generation, validation, refresh"
        - oauth_patterns: "OAuth 2.0, OpenID Connect flows"
  
  nextjs:
    common_queries:
      - routing_patterns: "App router, pages router, dynamic routes"
      - data_fetching: "getServerSideProps, getStaticProps, SWR"
      - api_routes: "API design, middleware, validation"
      - deployment_patterns: "Vercel, Docker, static export"
      - performance_optimization: "ISR, edge functions, image optimization"
    
    version_migrations:
      "12_to_13":
        - next_image: "Image component changes"
        - eslint_config: "ESLint configuration updates"
        - fonts: "Font optimization changes"
      
      "13_to_14":
        - app_directory: "App router migration"
        - server_components: "RSC adoption patterns"
        - turbopack: "Turbopack integration"
  
  typescript:
    common_queries:
      - type_design: "Interface vs type, generic patterns"
      - strict_configuration: "Strict mode configuration"
      - utility_types: "Mapped types, conditional types"
      - declaration_files: "*.d.ts creation and management"
      - integration_patterns: "Framework-specific typing"
    
    advanced_patterns:
      - conditional_types: "Complex type logic implementation"
      - template_literals: "String manipulation at type level"
      - recursive_types: "Self-referencing type definitions"
      - brand_types: "Nominal typing patterns"

# AGENT-SPECIFIC CONTEXT7 USAGE
agent_usage_patterns:
  maker-agent:
    pre_implementation_queries:
      description: "Query documentation before implementing features"
      workflow: |
        1. Identify external libraries to be used
        2. Query Context7 for current best practices
        3. Get implementation examples and patterns
        4. Retrieve security and performance guidelines
        5. Generate code following official patterns
      
      implementation: |
        async function preImplementationResearch(libraries, feature_spec) {
          const research = {};
          
          for (const library of libraries) {
            // Get official documentation
            const docs = await context7.queryDocumentation(library.name, library.version, {
              topic: feature_spec.domain,
              include_examples: true
            });
            
            // Get best practices
            const practices = await context7.getBestPractices(library.name, {
              context: feature_spec.context,
              complexity: feature_spec.complexity
            });
            
            research[library.name] = {
              documentation: docs,
              best_practices: practices,
              examples: docs.examples,
              warnings: docs.warnings || practices.anti_patterns
            };
          }
          
          return research;
        }
    
    code_validation_queries:
      description: "Validate generated code against official patterns"
      approach:
        - Compare implementation with official examples
        - Check for deprecated pattern usage
        - Validate configuration against documentation
        - Verify security best practices adherence
  
  plan-agent:
    architecture_research:
      description: "Research architectural patterns and decisions"
      query_types:
        - technology_comparison: "Compare frameworks and libraries"
        - scalability_patterns: "Get scalability best practices"
        - integration_strategies: "Research integration approaches"
        - migration_planning: "Plan technology migrations"
      
      implementation: |
        async function architectureResearch(technology_options, requirements) {
          const comparison = {};
          
          for (const tech of technology_options) {
            // Get architectural guidance
            const architecture = await context7.getBestPractices(tech.name, {
              context: 'architecture',
              scale: requirements.scale,
              domain: requirements.domain
            });
            
            // Get integration patterns
            const integration = await context7.queryDocumentation(tech.name, 'latest', {
              topic: 'integration',
              context: requirements.existing_stack
            });
            
            comparison[tech.name] = {
              architectural_fit: architecture,
              integration_complexity: integration,
              pros_cons: {
                pros: architecture.benefits,
                cons: architecture.limitations
              }
            };
          }
          
          return comparison;
        }
    
    technology_selection:
      description: "Support technology selection decisions"
      criteria:
        - community_adoption: "Popularity and community size"
        - maintenance_status: "Active development and support"
        - learning_curve: "Team expertise requirements"
        - ecosystem_maturity: "Available tools and libraries"
        - performance_characteristics: "Performance benchmarks"
  
  docs-agent:
    example_generation:
      description: "Generate accurate examples from official documentation"
      approach:
        - Query official examples for features
        - Get recommended usage patterns
        - Validate example correctness
        - Include version compatibility notes
      
      implementation: |
        async function generateDocumentationExamples(api_list) {
          const examples = {};
          
          for (const api of api_list) {
            const apiDocs = await context7.queryDocumentation(api.library, api.version, {
              topic: api.method,
              include_examples: true,
              format: 'markdown'
            });
            
            examples[api.method] = {
              basic_usage: apiDocs.examples.basic,
              advanced_usage: apiDocs.examples.advanced,
              common_patterns: apiDocs.patterns,
              gotchas: apiDocs.warnings,
              related_apis: apiDocs.related
            };
          }
          
          return examples;
        }
    
    documentation_validation:
      description: "Validate documentation against official sources"
      validation_checks:
        - api_signature_accuracy: "Verify method signatures"
        - example_correctness: "Test example code"
        - version_compatibility: "Check version requirements"
        - link_validity: "Verify external references"

# CACHING AND PERFORMANCE
caching_strategy:
  documentation_cache:
    description: "Cache frequently accessed documentation"
    cache_levels:
      l1_memory:
        ttl: 1800  # 30 minutes
        max_entries: 500
        eviction: "LRU"
      
      l2_persistent:
        ttl: 86400  # 24 hours
        storage: "filesystem"
        compression: true
    
    cache_keys:
      - library_version_topic: "react-18.2.0-hooks"
      - practice_context: "nodejs-security-authentication"
      - migration_path: "angular-14-to-16"
    
    invalidation_strategies:
      - time_based: "TTL expiration"
      - version_based: "New version releases"
      - manual_refresh: "Explicit cache refresh"
  
  query_optimization:
    batching:
      description: "Batch related queries for efficiency"
      implementation: |
        async function batchDocumentationQueries(queries) {
          const grouped = groupQueriesByLibrary(queries);
          const results = {};
          
          for (const [library, libraryQueries] of grouped) {
            const batchResult = await context7.batchQuery(library, libraryQueries);
            Object.assign(results, batchResult);
          }
          
          return results;
        }
    
    intelligent_prefetching:
      description: "Prefetch likely-needed documentation"
      patterns:
        - related_apis: "Prefetch related API documentation"
        - dependency_docs: "Prefetch dependency documentation"
        - version_variants: "Prefetch adjacent version docs"

# ERROR HANDLING AND FALLBACKS
error_handling:
  context7_unavailable:
    fallback_strategy: "cached_documentation"
    implementation: |
      async function fallbackDocumentationQuery(library, topic) {
        console.warn('Context7 MCP unavailable, using cached documentation');
        
        // Check local documentation cache
        const cached = await getFromCache(`${library}-${topic}`);
        if (cached) {
          return {
            ...cached,
            source: 'cache',
            freshness: 'stale',
            warning: 'Using cached documentation - may be outdated'
          };
        }
        
        // Use bundled documentation as last resort
        const bundled = await getBundledDocs(library, topic);
        return {
          ...bundled,
          source: 'bundled',
          freshness: 'unknown',
          warning: 'Using bundled documentation - verify with official sources'
        };
      }
    
    degraded_functionality:
      - no_version_specific_guidance: "Generic best practices only"
      - no_migration_assistance: "Manual migration research required"
      - limited_examples: "Basic examples from cache"
      - no_real_time_updates: "Potentially outdated information"
  
  partial_results:
    handling_strategy: "best_effort_with_warnings"
    approach:
      - return_available_data: "Provide what information is available"
      - flag_incomplete_results: "Mark partial results clearly"
      - suggest_alternatives: "Recommend manual verification"
      - log_failures: "Record failed queries for analysis"

# QUALITY ASSURANCE
quality_metrics:
  documentation_freshness:
    - last_updated_timestamp: "When documentation was last fetched"
    - version_alignment: "Match between requested and available versions"
    - completeness_score: "Percentage of requested topics covered"
    - accuracy_validation: "Cross-reference with multiple sources"
  
  usage_effectiveness:
    - query_success_rate: "> 95% successful documentation retrieval"
    - cache_hit_rate: "> 80% for frequently accessed documentation"
    - response_relevance: "> 90% relevance score for returned content"
    - user_satisfaction: "Feedback on documentation usefulness"

# BEST PRACTICES
integration_guidelines:
  query_design:
    - specific_topics: "Query specific topics rather than broad categories"
    - version_specification: "Always specify versions when available"
    - context_inclusion: "Provide implementation context for better results"
    - example_requests: "Request examples when implementing features"
  
  performance_optimization:
    - cache_utilization: "Leverage caching for repeated queries"
    - batch_operations: "Group related queries together"
    - asynchronous_loading: "Load documentation asynchronously"
    - intelligent_prefetching: "Prefetch likely-needed information"
  
  reliability_patterns:
    - fallback_strategies: "Always have offline documentation fallbacks"
    - error_handling: "Graceful degradation when Context7 unavailable"
    - result_validation: "Validate documentation against known patterns"
    - version_tracking: "Track documentation versions and updates"