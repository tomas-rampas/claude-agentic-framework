---
category: development
priority: high
agents: [maker-agent, reader-agent, debug-agent, security-agent, test-agent, docs-agent]
description: "Ensures proper MCP server usage across all agents"
tags: [mcp, integration, filesystem, serena, context7, sequentialthinking]
last_updated: "2025-09-07"
mcp_dependencies: [filesystem, serena, context7, sequentialthinking]
---

# MCP Integration Hook
# Ensures proper MCP server usage patterns across all agents

hook_name: mcp-integration
version: "2.0"
trigger: "on_operation"

# CORE MCP ACTIONS
actions:
  use_filesystem:
    description: "Route file operations through filesystem MCP"
    required: true
    mcp_server: "filesystem"
    implementation: |
      - Replace Read/Write tools with filesystem MCP
      - Use atomic writes for file operations
      - Handle large files efficiently
      - Implement proper error handling
    fallback: "use native Read/Write tools"
    
  use_serena:
    description: "Use serena for all symbol operations"
    required: true
    mcp_server: "serena"
    implementation: |
      - Use serena for symbol resolution
      - Leverage serena for refactoring
      - Get symbol references before changes
      - Use for call graph analysis
    fallback: "use grep/search for text-based operations"
    
  query_context7:
    description: "Get external library documentation"
    required: true
    mcp_server: "context7"
    implementation: |
      - Query before using external libraries
      - Get version-specific documentation
      - Retrieve best practices and patterns
      - Cache responses for performance
    fallback: "use cached documentation and general patterns"
    
  complex_reasoning:
    description: "Use sequential thinking for complex problems"
    required: false
    mcp_server: "sequentialthinking"
    implementation: |
      - Break down complex architectural decisions
      - Use for multi-step problem solving
      - Apply to root cause analysis
      - Systematic approach to algorithm design
    fallback: "use native reasoning capabilities"

# MCP SERVER SPECIFICATIONS
mcp_servers:
  filesystem:
    purpose: "Enhanced file operations"
    mandatory_for:
      - file_operations_large: ">1MB files"
      - atomic_writes: "Critical file updates"
      - concurrent_access: "Multiple agent access"
      - directory_operations: "Recursive operations"
    
    operations:
      read:
        syntax: "filesystem.read(path, options?)"
        options: ["encoding", "limit", "offset"]
        use_cases: ["large files", "binary files", "streaming"]
      
      write:
        syntax: "filesystem.write(path, content, options?)"
        options: ["atomic", "backup", "encoding"]
        use_cases: ["atomic updates", "concurrent writes"]
      
      list:
        syntax: "filesystem.list(directory, options?)"
        options: ["recursive", "pattern", "type"]
        use_cases: ["project structure", "file discovery"]
      
      search:
        syntax: "filesystem.search(pattern, scope?)"
        options: ["regex", "case_sensitive", "file_types"]
        use_cases: ["fast pattern matching", "code search"]
    
    performance_benefits:
      - "10x faster for large files"
      - "Atomic operations prevent corruption"
      - "Better memory usage for streaming"
      - "Concurrent access handling"
  
  serena:
    purpose: "Semantic code intelligence"
    mandatory_for:
      - symbol_operations: "All symbol resolution"
      - refactoring: "Safe code modifications"
      - reference_tracking: "Find all usages"
      - call_graph: "Method navigation"
    
    operations:
      getSymbolDefinition:
        syntax: "serena.getSymbolDefinition(symbol, location)"
        returns: "definition location and context"
        use_cases: ["go to definition", "symbol lookup"]
      
      getSymbolReferences:
        syntax: "serena.getSymbolReferences(symbol, location)"
        returns: "all usage locations"
        use_cases: ["find all references", "refactoring prep"]
      
      getWorkspaceSymbols:
        syntax: "serena.getWorkspaceSymbols(query?)"
        returns: "matching symbols across project"
        use_cases: ["project navigation", "symbol search"]
      
      renameSymbol:
        syntax: "serena.renameSymbol(symbol, newName, location)"
        returns: "workspace edit with all changes"
        use_cases: ["safe renaming", "refactoring"]
    
    semantic_capabilities:
      - "Type-aware operations"
      - "Cross-reference tracking"
      - "Scope-aware analysis"
      - "Language-specific parsing"
  
  context7:
    purpose: "External documentation and best practices"
    mandatory_for:
      - external_libraries: "Before using any framework"
      - best_practices: "Implementation patterns"
      - migration_guides: "Version updates"
      - api_reference: "API documentation"
    
    operations:
      queryDocumentation:
        syntax: "context7.query(library, version?, topic?)"
        returns: "official documentation snippets"
        use_cases: ["API reference", "usage examples"]
      
      getBestPractices:
        syntax: "context7.getBestPractices(technology, context?)"
        returns: "recommended patterns and practices"
        use_cases: ["implementation guidance", "architecture decisions"]
      
      getMigrationGuide:
        syntax: "context7.getMigration(from_version, to_version, library)"
        returns: "migration steps and breaking changes"
        use_cases: ["dependency updates", "version upgrades"]
    
    knowledge_domains:
      - "Framework documentation (React, Vue, Angular)"
      - "Language references (JS, Python, Go, Java)"
      - "Tool documentation (Docker, Kubernetes)"
      - "Best practices and patterns"
  
  sequentialthinking:
    purpose: "Complex problem decomposition"
    mandatory_for:
      - complex_problems: ">3 interconnected components"
      - architectural_decisions: "System design choices"
      - debugging_strategies: "Multi-layered issues"
      - algorithm_design: "Complex algorithms"
    
    operations:
      decomposeStrategy:
        syntax: "sequentialthinking.decompose(problem, context?)"
        returns: "step-by-step breakdown"
        use_cases: ["complex planning", "problem analysis"]
      
      analyzeTradeoffs:
        syntax: "sequentialthinking.analyze(options, criteria)"
        returns: "comparative analysis with recommendations"
        use_cases: ["technology selection", "architecture decisions"]
      
      developStrategy:
        syntax: "sequentialthinking.strategy(goal, constraints?)"
        returns: "comprehensive implementation strategy"
        use_cases: ["project planning", "refactoring strategies"]
    
    reasoning_capabilities:
      - "Multi-step problem decomposition"
      - "Trade-off analysis"
      - "Risk assessment"
      - "Strategy development"

# AGENT-SPECIFIC MCP USAGE PATTERNS
agent_patterns:
  maker-agent:
    primary_mcps: [filesystem, serena, context7]
    usage_patterns:
      pre_implementation:
        - "context7: Query framework documentation"
        - "serena: Analyze existing code patterns"
        - "filesystem: Read project structure"
      
      during_implementation:
        - "filesystem: Atomic file writes"
        - "serena: Symbol-aware modifications"
        - "context7: Reference implementation patterns"
      
      post_implementation:
        - "serena: Validate all references updated"
        - "filesystem: Verify file integrity"
    
    mandatory_flows:
      - "ALWAYS query context7 before using external libraries"
      - "ALWAYS use serena for code modifications"
      - "ALWAYS use filesystem for file operations"
  
  reader-agent:
    primary_mcps: [filesystem, serena]
    usage_patterns:
      file_analysis:
        - "filesystem: Efficient file reading"
        - "serena: Symbol extraction"
        - "filesystem: Directory traversal"
      
      code_exploration:
        - "serena: Build symbol hierarchy"
        - "serena: Trace dependencies"
        - "filesystem: Read related files"
    
    performance_optimizations:
      - "Use filesystem.list() instead of recursive reads"
      - "Cache serena results for repeated queries"
      - "Parallel processing with filesystem streams"
  
  debug-agent:
    primary_mcps: [filesystem, serena, sequentialthinking]
    usage_patterns:
      error_analysis:
        - "filesystem: Read log files efficiently"
        - "serena: Trace call stack"
        - "sequentialthinking: Complex debugging strategy"
      
      root_cause_analysis:
        - "sequentialthinking: Systematic approach"
        - "serena: Code flow analysis"
        - "filesystem: Check related files"
    
    complex_scenarios:
      - "Use sequentialthinking for >2 error categories"
      - "Always use filesystem for log processing"
      - "Use serena for all symbol-related debugging"

# FALLBACK STRATEGIES
fallback_strategies:
  filesystem_failure:
    strategy: "native_tools"
    implementation:
      - "Fall back to Read/Write tools"
      - "Log MCP unavailability"
      - "Continue with warning"
      - "Retry MCP periodically"
    
    limitations:
      - "No atomic operations"
      - "Slower large file processing"
      - "No concurrent access handling"
  
  serena_failure:
    strategy: "text_search"
    implementation:
      - "Use Grep for text-based search"
      - "Manual symbol resolution"
      - "Text-based refactoring"
      - "Warning about reduced accuracy"
    
    limitations:
      - "No semantic understanding"
      - "Higher error rate in refactoring"
      - "No type awareness"
  
  context7_failure:
    strategy: "cached_knowledge"
    implementation:
      - "Use general best practices"
      - "Apply cached patterns"
      - "Flag for manual review"
      - "Proceed with conservative approach"
    
    limitations:
      - "May use outdated patterns"
      - "No version-specific guidance"
      - "Reduced confidence in recommendations"
  
  sequentialthinking_failure:
    strategy: "native_reasoning"
    implementation:
      - "Use built-in problem solving"
      - "Simplify problem scope"
      - "Linear approach instead of systematic"
      - "Request human guidance for complex issues"

# QUALITY ASSURANCE
quality_gates:
  mcp_health_check:
    - check: "all_primary_mcps_available"
      threshold: 1.0
      action: "proceed"
    
    - check: "fallback_triggered"
      threshold: 0.1
      action: "log_warning"
    
    - check: "operation_success_rate"
      threshold: 0.95
      action: "investigate"
  
  performance_monitoring:
    - metric: "mcp_response_time"
      threshold: 5000  # ms
      action: "optimize_usage"
    
    - metric: "mcp_error_rate"
      threshold: 0.05
      action: "review_patterns"

# MONITORING AND ANALYTICS
monitoring:
  metrics_tracked:
    - mcp_call_frequency
    - success_rates
    - fallback_trigger_rate
    - performance_impact
    - error_patterns
  
  reporting:
    daily:
      - mcp_usage_summary
      - error_report
      - performance_metrics
    
    weekly:
      - trend_analysis
      - optimization_recommendations
      - fallback_usage_review
  
  alerting:
    critical:
      - "MCP server completely unavailable"
      - "Error rate > 10%"
      - "Performance degradation > 50%"
    
    warning:
      - "Fallback usage > 20%"
      - "Response time > threshold"
      - "Unusual error patterns"

# BEST PRACTICES
best_practices:
  error_handling:
    - "Always implement fallback strategies"
    - "Log MCP failures for analysis"
    - "Graceful degradation when possible"
    - "Retry with exponential backoff"
  
  performance:
    - "Cache MCP responses when appropriate"
    - "Batch operations when possible"
    - "Use streaming for large datasets"
    - "Monitor and optimize usage patterns"
  
  integration:
    - "Test fallback scenarios regularly"
    - "Document MCP dependencies clearly"
    - "Version control MCP configurations"
    - "Monitor MCP server health"