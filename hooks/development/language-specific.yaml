---
category: development
priority: medium
agents: [maker-agent]
description: "Language-specific development patterns and tools"
tags: [javascript, python, go, typescript, linting, formatting]
last_updated: "2025-09-07"
mcp_dependencies: []
---

# Language-Specific Hook
# Defines language-specific development patterns, tools, and best practices

hook_name: language-specific
version: "1.0"
trigger: "on_file_type_detection"

# CORE LANGUAGE-SPECIFIC ACTIONS
actions:
  apply_linter:
    description: "Apply the appropriate linter for the current file type"
    required: true
    implementation: |
      - For JavaScript and TypeScript, use ESLint
      - For Python, use Pylint
      - For Go, use golint
      - For C#, use .NET Analyzers
      - For C++, use Clang-Tidy
      - For Rust, use Clippy

  apply_formatter:
    description: "Apply the appropriate formatter for the current file type"
    required: true
    implementation: |
      - For JavaScript, TypeScript, and JSON, use Prettier
      - For Python, use Black
      - For Go, use gofmt
      - For C#, use dotnet-format
      - For C++, use Clang-Format
      - For Rust, use rustfmt

  enforce_idiomatic_code:
    description: "Ensure that the code follows the idiomatic conventions of the language"
    required: true
    implementation: |
      - For Python, follow the Zen of Python (PEP 20)
      - For Go, follow the principles of Effective Go
      - For JavaScript, follow community-driven style guides like Airbnb's
      - For C#, follow the C# Coding Conventions
      - For C++, follow the C++ Core Guidelines
      - For Rust, follow the Rust API Guidelines

  use_language_specific_tools:
    description: "Leverage language-specific tools for development and testing"
    required: false
    implementation: |
      - For Node.js projects, use npm or yarn for package management
      - For Python projects, use pip and virtual environments
      - For Go projects, use Go modules for dependency management
      - For C# projects, use NuGet for package management
      - For C++ projects, use Conan or vcpkg for package management
      - For Rust projects, use Cargo for package management