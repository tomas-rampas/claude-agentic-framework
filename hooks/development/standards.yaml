---
category: development
priority: high
agents: [maker-agent]
description: "Enforces coding standards and best practices"
tags: [coding-standards, best-practices, style-guide]
last_updated: "2025-09-07"
mcp_dependencies: []
---

# Development Standards Hook
# Enforces coding standards and best practices across all code creation

hook_name: development-standards
version: "1.0"
trigger: "on_code_write"

# ACTIONS
actions:
  check_style:
    description: "Verify code style compliance"
    required: true
    implementation: |
      - Apply language-specific style guides
      - Check indentation and formatting
      - Validate naming conventions
      - Ensure consistent spacing
    
  enforce_naming:
    description: "Check naming conventions"
    required: true
    implementation: |
      - Validate variable naming (camelCase, snake_case)
      - Check function naming patterns
      - Verify class naming conventions
      - Ensure constant naming standards
    
  validate_structure:
    description: "Ensure proper file organization"
    required: true
    implementation: |
      - Check import organization
      - Validate file structure
      - Ensure proper module exports
      - Verify dependency organization
    
  add_comments:
    description: "Ensure adequate documentation"
    required: false
    implementation: |
      - Add function documentation
      - Explain complex logic
      - Add TODO/FIXME comments where needed
      - Ensure public API documentation

# CONFIGURATION
config:
  style_guide: "project-specific"
  naming_convention: "camelCase"
  max_line_length: 120
  indent_size: 2
  require_semicolons: true
  trailing_commas: true
  quote_style: "single"

# LANGUAGE-SPECIFIC RULES
language_rules:
  javascript:
    linter: "eslint"
    config_file: ".eslintrc.json"
    auto_fix: true
    rules:
      - no_unused_vars
      - consistent_return
      - prefer_const
    
  typescript:
    linter: "tslint"
    config_file: "tslint.json" 
    auto_fix: true
    rules:
      - strict_null_checks
      - no_any
      - prefer_readonly
    
  python:
    linter: "pylint"
    formatter: "black"
    config_file: "pyproject.toml"
    rules:
      - line_too_long
      - missing_docstring
      - unused_variable
    
  go:
    formatter: "gofmt"
    linter: "golint"
    rules:
      - exported_function_docs
      - package_comment
      - receiver_name

  csharp:
    formatter: "dotnet-format"
    linter: ".NET Analyzers"
    rules:
      - "IDE0005: Using directive is unnecessary"
      - "IDE0055: Fix formatting"
      - "IDE0060: Remove unused parameter"

  cpp:
    formatter: "Clang-Format"
    linter: "Clang-Tidy"
    rules:
      - "modernize-use-nullptr"
      - "readability-braces-around-statements"
      - "performance-unnecessary-value-param"

  rust:
    formatter: "rustfmt"
    linter: "Clippy"
    rules:
      - "clippy::all"
      - "clippy::pedantic"
      - "clippy::nursery"

# QUALITY METRICS
quality_metrics:
  cyclomatic_complexity: 10
  function_length: 50
  class_length: 500
  file_length: 1000
  nesting_depth: 4

# VALIDATION RULES
validation:
  required_patterns:
    - error_handling: "All functions must handle errors appropriately"
    - input_validation: "All user inputs must be validated"
    - return_documentation: "All public functions must document return values"
  
  forbidden_patterns:
    - eval_usage: "eval() function usage is forbidden"
    - hardcoded_credentials: "No hardcoded passwords or API keys"
    - magic_numbers: "Avoid magic numbers, use named constants"
    - deep_nesting: "Avoid nesting deeper than 4 levels"

# ENFORCEMENT LEVELS
enforcement:
  blocking:
    - syntax_errors
    - security_violations
    - critical_style_violations
  
  warning:
    - minor_style_issues
    - documentation_gaps
    - complexity_warnings
  
  suggestion:
    - optimization_opportunities
    - refactoring_suggestions
    - alternative_patterns

# INTEGRATION
integrations:
  pre_commit:
    enabled: true
    hooks:
      - style_check
      - lint_check
      - format_check
  
  ci_pipeline:
    enabled: true
    fail_on_errors: true
    generate_report: true
  
  ide_integration:
    vscode:
      extensions:
        - eslint
        - prettier
        - pylint
    
    jetbrains:
      plugins:
        - checkstyle
        - spotbugs