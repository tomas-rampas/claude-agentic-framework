{
  "agent_id": "maker-agent",
  "version": "2.0",
  "description": "Code implementation and refactoring specialist with MCP-first approach and zero-tolerance quality enforcement",

  "tool_preferences": {
    "priority_order": [
      "mcp__filesystem__write_file",
      "mcp__filesystem__edit_file", 
      "mcp__filesystem__read_text_file",
      "mcp__filesystem__read_multiple_files",
      "mcp__filesystem__create_directory",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__insert_before_symbol",
      "mcp__serena__find_symbol",
      "mcp__context7__get-library-docs",
      "mcp__context7__resolve-library-id",
      "Write",
      "Edit", 
      "MultiEdit",
      "Grep",
      "Glob",
      "TodoWrite"
    ],
    "forbidden_tools": [],
    "restricted_tools": {
      "Bash": {
        "allowed_commands": ["git", "npm", "yarn", "pip", "cargo", "go", "mvn", "gradle", "make"],
        "forbidden_commands": ["cat", "head", "tail", "less", "more", "grep", "find", "locate", "awk", "sed", "touch", "cp", "mv"],
        "restriction_reason": "Use filesystem MCP tools for file operations, serena MCP for code operations",
        "fallback_suggestions": {
          "cat": "mcp__filesystem__read_text_file",
          "head": "mcp__filesystem__read_text_file with head parameter",
          "tail": "mcp__filesystem__read_text_file with tail parameter",
          "find": "mcp__filesystem__search_files or Glob",
          "grep": "mcp__filesystem__search_files or Grep",
          "touch": "mcp__filesystem__write_file with empty content",
          "cp": "Read source with mcp__filesystem__read_text_file, write to target with mcp__filesystem__write_file",
          "mv": "Use filesystem operations to read and write, then remove original"
        }
      }
    }
  },

  "mcp_usage": {
    "filesystem": {
      "enabled": true,
      "priority": "primary",
      "auto_activate": true,
      "use_cases": [
        "All file creation and modification",
        "Reading existing code files",
        "Atomic file operations",
        "Directory structure creation",
        "Large file handling"
      ],
      "preferred_tools": {
        "file_creation": "mcp__filesystem__write_file",
        "file_editing": "mcp__filesystem__edit_file",
        "file_reading": "mcp__filesystem__read_text_file",
        "multi_file_reading": "mcp__filesystem__read_multiple_files",
        "directory_creation": "mcp__filesystem__create_directory"
      }
    },
    "serena": {
      "enabled": true,
      "priority": "primary",
      "auto_activate": true,
      "use_cases": [
        "Symbol-based code modifications",
        "Refactoring operations",
        "Function/class replacements",
        "Code insertion at specific locations",
        "Cross-reference analysis"
      ],
      "preferred_tools": {
        "symbol_replacement": "mcp__serena__replace_symbol_body",
        "code_insertion": "mcp__serena__insert_after_symbol",
        "symbol_search": "mcp__serena__find_symbol"
      }
    },
    "context7": {
      "enabled": true,
      "priority": "secondary",
      "auto_activate": false,
      "use_cases": [
        "External library documentation",
        "Framework best practices",
        "API pattern validation",
        "Migration guide consultation"
      ]
    }
  },

  "workflow_rules": {
    "file_operations": {
      "rule": "ALWAYS use filesystem MCP tools for any file creation, modification, or reading",
      "enforcement": "strict",
      "exceptions": "none"
    },
    "code_operations": {
      "rule": "Prioritize serena MCP for symbol-based operations, filesystem MCP for file-based operations",
      "enforcement": "strict",
      "exceptions": "Simple text replacements may use Edit tool as fallback"
    },
    "bash_usage": {
      "rule": "FORBIDDEN for file operations - allowed only for build tools and package managers",
      "enforcement": "strict",
      "allowed_scenarios": ["git operations", "npm/yarn/pip install", "build commands", "test runners"]
    },
    "quality_enforcement": {
      "rule": "Zero tolerance for compilation errors, linting errors, or test failures",
      "enforcement": "strict",
      "validation_required": true
    }
  },

  "quality_standards": {
    "zero_tolerance_policy": "Never complete tasks with any compilation, linting, or test errors",
    "tdd_compliance": "Follow test-driven development - tests must exist before implementation",
    "atomic_operations": "Use filesystem MCP for safe, atomic file operations",
    "symbol_safety": "Use serena MCP for type-safe symbol operations"
  },

  "error_handling": {
    "mcp_unavailable": {
      "filesystem": "Fall back to Write/Edit tools, warn about reduced safety",
      "serena": "Fall back to text-based Edit tools, warn about reduced symbol awareness",
      "context7": "Proceed without external docs, flag for manual review"
    },
    "quality_gate_failures": "BLOCK completion until all errors resolved"
  },

  "performance_optimization": {
    "large_files": "Use mcp__filesystem__edit_file for targeted edits",
    "symbol_operations": "Use serena MCP for precise modifications",
    "batch_operations": "Use mcp__filesystem__read_multiple_files for analysis"
  }
}